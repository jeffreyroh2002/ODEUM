import React, { useState, useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import Header from "./components/Header";
import { Chart, registerables } from 'chart.js';

Chart.register(...registerables);

export default function TestCompleted() {
    const location = useLocation();
    const testId = new URLSearchParams(location.search).get('testId');
    const [testResults, setTestResults] = useState(null);

    // Refs for the radar chart canvases
    const genreChartRef = useRef(null);
    const moodChartRef = useRef(null);
    const vocalChartRef = useRef(null);

    useEffect(() => {
        if (!testId) {
            console.error('Test ID is missing.');
            return;
        }
        console.log("test id: ", testId);
        fetch(`/test_results?testId=${testId}`) // Adjust this URL for your backend
            .then(res => {
                if (!res.ok) {
                    throw new Error('Network response was not ok');
                }
                return res.json();
            })
            .then(data => {
                setTestResults(data);
                // Initialize charts here after ensuring the component has mounted
                // and the divs for the charts are available in the DOM
                if (data) {
                    initializeCharts(data);
                }
            })
            .catch(error => console.error('Error fetching test results:', error));
    }, [testId]);

    // Function to initialize radar charts
    const initializeCharts = (data) => {
        if (genreChartRef.current && data.genre_score) {
            new Chart(genreChartRef.current, createChartConfig('Genre Preferences', data.genre_score));
        }
        if (moodChartRef.current && data.mood_score) {
            new Chart(moodChartRef.current, createChartConfig('Mood Preferences', data.mood_score));
        }
        if (vocalChartRef.current && data.vocal_score) {
            new Chart(vocalChartRef.current, createChartConfig('Vocal Preferences', data.vocal_score));
        }
    };

    // Helper function to create chart configuration
    const createChartConfig = (title, score) => ({
        type: 'radar',
        data: {
            labels: Object.keys(score),
            datasets: [{
                label: title,
                data: Object.values(score),
                fill: true,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgb(255, 99, 132)',
                pointBackgroundColor: 'rgb(255, 99, 132)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgb(255, 99, 132)'
            }]
        },
        options: {
            elements: {
                line: {
                    borderWidth: 3
                }
            },
            scales: {
                r: {
                    angleLines: {
                        display: false
                    },
                    suggestedMin: 0,
                    suggestedMax: 100
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: title
                }
            }
        }
    });

    return (
        <div>
            <Header />
            <h1>Test Completed</h1>
            <p>Test ID: {testId}</p>
            {testResults ? (
                <div>
                    {/* Radar charts for preferences */}
                    <div>
                        <canvas ref={genreChartRef}></canvas>
                    </div>
                    <div>
                        <canvas ref={moodChartRef}></canvas>
                    </div>
                    <div>
                        <canvas ref={vocalChartRef}></canvas>
                    </div>
                    {/* Display the images generated by Flask */}
                <div>
                    <h2>Genre Preferences Image</h2>
                    <img src={`data:image/png;base64,${testResults.genre_image}`} alt="Genre Preferences" style={{ maxWidth: '100%', height: 'auto' }} />
                </div>
                <div>
                    <h2>Mood Preferences Image</h2>
                    <img src={`data:image/png;base64,${testResults.mood_image}`} alt="Mood Preferences" style={{ maxWidth: '100%', height: 'auto' }} />
                </div>
                <div>
                    <h2>Vocal Preferences Image</h2>
                    <img src={`data:image/png;base64,${testResults.vocal_image}`} alt="Vocal Preferences" style={{ maxWidth: '100%', height: 'auto' }} />
                </div>

                {/* Display preference scales */}
                <div className="preference-scales">
                    <h3>Genre Scores</h3>
                    <ul>
                        {Object.entries(testResults.genre_score).map(([genre, score]) => (
                            <li key={genre}>{genre}: {score.toFixed(2)}</li>
                        ))}
                    </ul>
                </div>
                <div className="preference-scales">
                    <h3>Mood Scores</h3>
                    <ul>
                        {Object.entries(testResults.mood_score).map(([mood, score]) => (
                            <li key={mood}>{mood}: {score.toFixed(2)}</li>
                        ))}
                    </ul>
                </div>
                <div className="preference-scales">
                    <h3>Vocal Scores</h3>
                    <ul>
                        {Object.entries(testResults.vocal_score).map(([vocal, score]) => (
                            <li key={vocal}>{vocal}: {score.toFixed(2)}</li>
                        ))}
                    </ul>
                </div>

                {/* Displaying messages */}
                <div className="display-messages">
                    <h3>Messages</h3>
                    {testResults.display_messages && testResults.display_messages.length > 0 ? (
                        testResults.display_messages.map((message, index) => (
                            <p key={index}>{message}</p>
                        ))
                    ) : (
                        <p>No specific messages to display.</p>
                    )}
                </div>
                </div>
            ) : (
                <p>Loading test results...</p>
            )}
        </div>
    );
}
